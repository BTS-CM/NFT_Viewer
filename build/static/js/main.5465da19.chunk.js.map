{"version":3,"sources":["components/Connect.js","components/BeetLink.js","components/Mode.js","components/SelectAsset.js","components/Featured.js","components/Portfolio.js","components/Buy.js","components/NFT.js","App.js","index.js"],"names":["Connect","properties","connection","setConnection","setAuthenticated","inProgress","setInProgress","useState","response","Box","mx","sx","padding","Loader","variant","Text","size","Col","span","Paper","shadow","Button","marginTop","onClick","async","beetOnline","connected","checkBeet","error","console","log","connect","authenticated","connectToBeet","paddingTop","marginRight","window","electron","openURL","BeetLink","setEnvironment","setIsLinked","setIdentity","setCrypto","_linkToBeet","target","linkAttempt","link","identity","linkContents","Mode","setMode","marginLeft","SelectAsset","setAsset","setNodes","setImages","setProdConnection","setTestnetConnection","environment","nodes","userID","wsURL","issuedAssets","setIssuedAssets","tries","setTries","topText","useEffect","Apis","instance","init_promise","nodesToChange","push","shift","url","changeURL","fullAccounts","db_api","exec","assetsDetails","accountAssets","assets","identifiedNFTs","filter","asset","options","description","length","includes","fetchIssuedAssets","weight","buttonList","map","compact","margin","output","JSON","parse","nft_object","media_png_multihashes","media_PNG_multihashes","value","type","media_gif_multihashes","media_GIF_multihashes","media_jpeg_multihash","media_JPEG_multihash","chosenAsset","symbol","id","cols","newTries","increaseTries","Featured","setAssets","testConnections","then","fastestNode","res","node","latencies","featuredAssets","featuredIDs","config","featured","nft","filteredAssets","fetchAsset","balances","SimpleGrid","artistItems","item","selectAsset","artist","Portfolio","setBalances","tryAgain","balanceResult","balanceSymbols","balance","asset_id","fetchBalances","Buy","bought","setBought","back","NFT","App","isLinked","mode","useLocalStorageState","defaultValue","prodConnection","testnetConnection","initPrompt","requested","account","className","Container","Grid","grow","style","width","Image","radius","src","alt","caption","Divider","color","marginBottom","container","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.5465da19.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { Button, Group, Box, Text, Divider, Loader, Col, Paper, Checkbox } from '@mantine/core';\r\nimport { connect, checkBeet } from 'beet-js';\r\n\r\nexport default function Connect(properties) {\r\n  const connection = properties.connection;\r\n  const setConnection = properties.setConnection;\r\n  const setAuthenticated = properties.setAuthenticated;\r\n\r\n  const [inProgress, setInProgress] = useState(false);\r\n\r\n  function beetDownload() {\r\n    window.electron.openURL('github');\r\n  }\r\n\r\n  async function connectToBeet() {\r\n    setInProgress(true);\r\n\r\n    let beetOnline;\r\n    try {\r\n      beetOnline = await checkBeet(true);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n\r\n    if (!beetOnline) {\r\n      setInProgress(false);\r\n      return;\r\n    }\r\n\r\n    let connected;\r\n    try {\r\n      connected = await connect(\r\n        \"NFT Issuance tool\",\r\n        \"Application\",\r\n        \"localhost\"\r\n      );\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n\r\n    console.log('after')\r\n\r\n    if (!connected) {\r\n      console.error(\"Couldn't connect to Beet\");\r\n      setConnection(null);\r\n      setAuthenticated(null);\r\n      setInProgress(false);\r\n      return;\r\n    }\r\n\r\n    setConnection(connected);\r\n    setInProgress(false);\r\n    setAuthenticated(connected.authenticated);\r\n  }\r\n\r\n  let response;\r\n  if (inProgress === false && !connection) {\r\n    response = <span>\r\n                <Col span={12}>\r\n                  <Paper padding=\"sm\" shadow=\"xs\">\r\n                    <Box mx=\"auto\" sx={{padding: '10px'}}>\r\n                      <Text size=\"md\">\r\n                        This tool is designed for use with the Bitshares BEET Wallet.\r\n                      </Text>\r\n                      <Text size=\"md\">\r\n                        Launch and unlock it, then click the connect button below to proceed.\r\n                      </Text>\r\n                      <Button\r\n                        sx={{marginTop: '15px'}}\r\n                        onClick={() => {\r\n                          connectToBeet()\r\n                        }}\r\n                      >\r\n                        Connect to Beet\r\n                      </Button>  \r\n                    </Box>\r\n                  </Paper>\r\n                </Col>\r\n                <Col span={12}>\r\n                  <Paper padding=\"sm\" shadow=\"xs\">\r\n                    <Box mx=\"auto\" sx={{padding: '10px', paddingTop: '10px'}}>\r\n                      <Text size=\"md\">\r\n                        Don't yet have the Bitshares BEET wallet installed? Follow the link below.\r\n                      </Text>\r\n                      <Text size=\"md\">\r\n                        Once installed, create a wallet for the Bitshares NFT issuing account and proceed to connect above.\r\n                      </Text>\r\n                      <Button\r\n                        sx={{marginTop: '15px', marginRight: '5px'}}\r\n                        onClick={() => {\r\n                          beetDownload()\r\n                        }}\r\n                      >\r\n                        Download BEET\r\n                      </Button>\r\n                    </Box>\r\n                  </Paper>\r\n                </Col>              \r\n              </span>;\r\n  } else {\r\n    response = <Box mx=\"auto\" sx={{padding: '10px'}}>\r\n                  <span>\r\n                    <Loader variant=\"dots\" />\r\n                    <Text size=\"md\">\r\n                      Connecting to BEET\r\n                    </Text>\r\n                  </span>\r\n                </Box>;\r\n    \r\n  }\r\n  \r\n  return (response);\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { Button, Group, Box, Text, Divider, Loader, Col, Paper } from '@mantine/core';\r\nimport { link } from 'beet-js';\r\n\r\nexport default function BeetLink(properties) {\r\n  const setEnvironment = properties.setEnvironment;\r\n  const setIsLinked = properties.setIsLinked;\r\n  const setIdentity = properties.setIdentity;\r\n  const setCrypto = properties.setCrypto;\r\n  const connection = properties.connection;\r\n\r\n  const [inProgress, setInProgress] = useState(false);\r\n\r\n  /*\r\n   * After connection attempt to link app to Beet client\r\n   */\r\n  async function _linkToBeet(target = \"BTS\") {\r\n    if (!connection) {\r\n      console.log(\"Missing Beet connection\");\r\n      return;\r\n    }\r\n    \r\n    setInProgress(true);\r\n    let linkAttempt;\r\n    try {\r\n      linkAttempt = await link(target, connection);\r\n    } catch (error) {\r\n      console.error(error)\r\n      setInProgress(false);\r\n      return;\r\n    }\r\n\r\n    if (!connection.identity) {\r\n      console.log(\"Link rejected\");\r\n      setInProgress(false);\r\n      return;\r\n    }\r\n\r\n    console.log('Successfully linked');\r\n    \r\n    setEnvironment(target === \"BTS\" ? 'production' : 'testnet');\r\n    setIsLinked(true);\r\n    setInProgress(false);\r\n    setIdentity(connection.identity);\r\n    setCrypto(target)\r\n  }\r\n  \r\n  let linkContents = inProgress === false\r\n  ? <span>\r\n      <Text size=\"md\">\r\n        Connected to Beet wallet successfully.\r\n      </Text>\r\n      <Text size=\"md\">\r\n        Proceed with linking this app to your Beet wallet below.\r\n      </Text>\r\n      <Button\r\n        sx={{marginTop: '15px', marginRight: '5px'}}\r\n        onClick={() => {\r\n          _linkToBeet('BTS')\r\n        }}\r\n      >\r\n        Link to production Bitshares\r\n      </Button>\r\n      <Button\r\n        sx={{marginTop: '15px'}}\r\n        onClick={() => {\r\n          _linkToBeet('BTS_TEST')\r\n        }}\r\n      >\r\n        Link to testnet Bitshares\r\n      </Button>\r\n    </span>\r\n  : <span>\r\n      <Loader variant=\"dots\" />\r\n      <Text size=\"md\">\r\n        Waiting on respond from BEET prompt\r\n      </Text>\r\n    </span>;\r\n\r\n  return (\r\n    <Col span={12}>\r\n      <Paper padding=\"sm\" shadow=\"xs\">\r\n        <Box mx=\"auto\" sx={{padding: '10px'}}>\r\n          {linkContents}\r\n        </Box>\r\n      </Paper>\r\n    </Col>\r\n  );\r\n}\r\n","import { Button, Box, Text, Col, Paper } from '@mantine/core';\r\n\r\nexport default function Mode(properties) {\r\n  const setMode = properties.setMode;\r\n  \r\n  return (\r\n    <Col span={12}>\r\n      <Paper padding=\"sm\" shadow=\"xs\">\r\n        <Box mx=\"auto\" sx={{padding: '10px'}}>\r\n          <span>\r\n            <Text size=\"md\">\r\n              What do you want to do?\r\n            </Text>\r\n            <Button\r\n              sx={{marginTop: '15px', marginRight: '5px', marginLeft: '5px'}}\r\n              onClick={() => {\r\n                setMode('search');\r\n              }}\r\n            >\r\n              Search for NFT\r\n            </Button>\r\n            <Button\r\n              sx={{marginTop: '15px', marginRight: '5px'}}\r\n              onClick={() => {\r\n                setMode('balance');\r\n              }}\r\n            >\r\n              View NFT portfolio\r\n            </Button>\r\n            <Button\r\n              sx={{marginTop: '15px', marginRight: '5px'}}\r\n              onClick={() => {\r\n                setMode('issued');\r\n              }}\r\n            >\r\n              View issued NFTs\r\n            </Button>\r\n            <Button\r\n              sx={{marginTop: '15px', marginRight: '5px'}}\r\n              onClick={() => {\r\n                setMode('featured');\r\n              }}\r\n            >\r\n              View featured\r\n            </Button>\r\n          </span>\r\n        </Box>\r\n      </Paper>\r\n    </Col>\r\n  );\r\n}\r\n","\r\nimport { useEffect, useState } from 'react';\r\nimport { Button, Group, Box, Text, Divider, SimpleGrid, Loader, Col, Paper } from '@mantine/core';\r\nimport { Apis } from \"bitsharesjs-ws\";\r\n\r\nexport default function SelectAsset(properties) {\r\n  const setAsset = properties.setAsset;\r\n  const setMode = properties.setMode;\r\n  const setNodes = properties.setNodes;\r\n  const setImages = properties.setImages;\r\n\r\n  const setProdConnection = properties.setProdConnection;\r\n  const setTestnetConnection = properties.setTestnetConnection;\r\n\r\n  const environment = properties.environment;\r\n  const nodes = properties.nodes;\r\n  const userID = properties.userID;\r\n  const wsURL = properties.wsURL;\r\n\r\n  const [issuedAssets, setIssuedAssets] = useState();\r\n  const [tries, setTries] = useState(0);\r\n  const [inProgress, setInProgress] = useState(false);\r\n\r\n  function increaseTries() {\r\n    let newTries = tries + 1;\r\n    setIssuedAssets();\r\n    setTries(newTries);\r\n  }\r\n  \r\n  function changeURL() {\r\n    let nodesToChange = nodes;\r\n    nodesToChange.push(nodesToChange.shift()); // Moving misbehaving node to end\r\n    setNodes(nodesToChange);\r\n    console.log(`Setting new node connection to: ${nodesToChange[0].url}`)\r\n    if (environment === 'production') {\r\n      setProdConnection(nodesToChange[0].url);\r\n    } else {\r\n      setTestnetConnection(nodesToChange[0].url);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * User has selected an asset to edit\r\n   * @param {Object} asset \r\n   */\r\n  function chosenAsset(asset) {\r\n    let description = JSON.parse(asset.options.description);\r\n\r\n    let output;\r\n    if (description.nft_object.media_png_multihashes || description.nft_object.media_PNG_multihashes) {\r\n      let hashes = description.nft_object.media_png_multihashes ?? description.nft_object.media_PNG_multihashes;\r\n      output = hashes.map(value => { return {url: value.url, type: 'PNG'}});\r\n    } else if (description.nft_object.media_gif_multihashes || description.nft_object.media_GIF_multihashes) {\r\n      let hashes = description.nft_object.media_png_multihashes ?? description.nft_object.media_PNG_multihashes;\r\n      output = hashes.map(value => { return {url: value.url, type: 'GIF'}});\r\n    } else if (description.nft_object.media_jpeg_multihash || description.nft_object.media_JPEG_multihash) {\r\n      let hashes = description.nft_object.media_jpeg_multihash ?? description.nft_object.media_JPEG_multihash;\r\n      output = hashes.map(value => { return {url: value.url, type: 'JPEG'}});\r\n    }\r\n    \r\n    setImages(output);\r\n    setAsset(asset);    \r\n  }\r\n\r\n  useEffect(() => {\r\n    async function fetchIssuedAssets() {\r\n      setInProgress(true);\r\n      setIssuedAssets();\r\n\r\n      try {\r\n        await Apis.instance(wsURL, true).init_promise;\r\n      } catch (error) {\r\n        console.log(error);\r\n        changeURL();\r\n        setInProgress(false);\r\n        return;\r\n      }\r\n      \r\n      let fullAccounts;\r\n      try {\r\n        fullAccounts = await Apis.instance().db_api().exec(\"get_full_accounts\", [[userID], true])\r\n      } catch (error) {\r\n        console.log(error);\r\n        setInProgress(false);\r\n        return;\r\n      }\r\n      \r\n      let accountAssets = fullAccounts[0][1].assets;\r\n\r\n\r\n      let assetsDetails;\r\n      try {\r\n        assetsDetails = await Apis.instance().db_api().exec(\"get_assets\", [accountAssets, true])\r\n      } catch (error) {\r\n        console.log(error);\r\n        setInProgress(false);\r\n        return;\r\n      }\r\n\r\n      let identifiedNFTs = assetsDetails.filter(asset => {\r\n        if (\r\n            asset.options &&\r\n            asset.options.description &&\r\n            asset.options.description.length &&\r\n            asset.options.description.includes(\"media_png_multihashes\") || asset.options.description.includes(\"media_PNG_multihashes\") ||\r\n            asset.options.description.includes(\"media_gif_multihashes\") || asset.options.description.includes(\"media_GIF_multihashes\") ||\r\n            asset.options.description.includes(\"media_jpeg_multihash\") || asset.options.description.includes(\"media_JPEG_multihash\")\r\n        ) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      })\r\n\r\n      setIssuedAssets(identifiedNFTs);\r\n      setInProgress(false);\r\n    }\r\n    fetchIssuedAssets();\r\n  }, [userID, tries]);\r\n  \r\n  let topText;\r\n  if (!issuedAssets) {\r\n    topText = <span>\r\n                <Loader variant=\"dots\" />\r\n                <Text size=\"md\">\r\n                  Retrieving info on your Bitshares account\r\n                </Text>\r\n              </span>;\r\n  } else if (!issuedAssets.length) {\r\n    topText = <span>\r\n                <Text size=\"md\">\r\n                  Nothing to edit\r\n                </Text>\r\n                <Text size=\"sm\" weight={600}>\r\n                  This Bitshares account hasn't issued any NFTs on the BTS DEX.\r\n                </Text>\r\n                <Text size=\"sm\" weight={600}>\r\n                  You can either create a new NFT or switch Bitshares account.\r\n                </Text>\r\n                <Text size=\"sm\" weight={600}>\r\n                  Note: Buying and owning an NFT on the BTS DEX doesn't automatically grant you NFT editing rights.\r\n                </Text>\r\n              </span>\r\n              \r\n  } else {\r\n    topText = <span>\r\n                <Text size=\"md\">\r\n                  Select the NFT you wish to edit\r\n                </Text>\r\n              </span>\r\n  }\r\n\r\n  let buttonList = issuedAssets\r\n                    ? issuedAssets.map(asset => {\r\n                        return <Button\r\n                                  compact\r\n                                  sx={{margin: '2px'}}\r\n                                  variant=\"outline\"\r\n                                  key={`button.${asset.id}`}\r\n                                  onClick={() => {\r\n                                    chosenAsset(asset)\r\n                                  }}\r\n                                >\r\n                                  {asset.symbol}: {asset.id}\r\n                                </Button>\r\n                      })\r\n                    : null;\r\n\r\n  return (\r\n    <Col span={12}>\r\n      <Paper padding=\"sm\" shadow=\"xs\">\r\n        <Box mx=\"auto\" sx={{padding: '10px'}}>\r\n          {\r\n            topText\r\n          }\r\n          <SimpleGrid cols={3} sx={{marginTop: '10px'}}>\r\n            {\r\n              buttonList\r\n            }\r\n          </SimpleGrid>\r\n\r\n          <Button\r\n            sx={{marginTop: '15px', marginRight: '5px'}}\r\n            onClick={() => {\r\n              increaseTries()\r\n            }}\r\n          >\r\n            Refresh\r\n          </Button>\r\n          <Button\r\n            sx={{marginTop: '15px'}}\r\n            onClick={() => {\r\n              setMode()\r\n            }}\r\n          >\r\n            Back\r\n          </Button>\r\n        </Box>\r\n      </Paper>\r\n    </Col>\r\n  );\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { Button, Text, Col, Paper, Group, Tooltip, Loader } from '@mantine/core';\r\nimport config from \"../config/config.json\";\r\n\r\nexport default function Featured(properties) {\r\n  const setAsset = properties.setAsset;\r\n  const setMode = properties.setMode;\r\n\r\n  const environment = properties.environment;\r\n  const setNodes = properties.setNodes;\r\n  const setProdConnection = properties.setProdConnection;\r\n  const setTestnetConnection = properties.setTestnetConnection;\r\n\r\n  const [assets, setAssets] = useState();\r\n  function back() {\r\n    setMode();\r\n  }\r\n\r\n  function selectAsset(item) {\r\n    setAsset(item)\r\n  }\r\n\r\n  useEffect(() => {\r\n    async function fetchAsset() {\r\n\r\n      let target = environment === 'production' ? 'BTS' : 'BTS_TEST';\r\n      window.electron.testConnections(target).then(async (res) => {\r\n        let fastestNode = res.node;\r\n        setNodes(res.latencies);\r\n\r\n        if (environment === 'production') {\r\n          setProdConnection(fastestNode);\r\n        } else {\r\n          setTestnetConnection(fastestNode);\r\n        }\r\n\r\n        try {\r\n          await Apis.instance(fastestNode, true).init_promise;\r\n        } catch (error) {\r\n          console.log(error);\r\n          changeURL();\r\n          return;\r\n        }\r\n        \r\n        let featuredIDs = config[environment].featured.map(nft => nft.id);\r\n\r\n        let featuredAssets;\r\n        try {\r\n          featuredAssets = await Apis.instance().db_api().exec( \"lookup_asset_symbols\", [ featuredIDs ]);\r\n        } catch (error) {\r\n          console.log(error);\r\n          return;\r\n        }\r\n\r\n        let filteredAssets = featuredAssets.filter(asset => {\r\n          let desc = JSON.parse(asset.options.description);\r\n          return desc.nft_object ? true : false;\r\n        })\r\n        \r\n        setAssets(filteredAssets.length ? filteredAssets : []);\r\n      })\r\n    }\r\n    fetchAsset();\r\n  }, [userID, tries]);\r\n\r\n  let response;\r\n  if (!balances) {\r\n    response = <span>\r\n                <Loader variant=\"dots\" />\r\n                <Text size=\"sm\" weight={600}>\r\n                    Fetching featured assets\r\n                </Text>\r\n              </span>;\r\n  } else if (!balances.length) {\r\n    response = <span>\r\n                <Text size=\"sm\" weight={600}>\r\n                    An error was encountered\r\n                </Text>\r\n              </span>;\r\n  } else {\r\n    response = <span>\r\n                <Loader variant=\"dots\" />\r\n                <Text size=\"sm\" weight={600}>\r\n                    Fetching featured assets\r\n                </Text>\r\n              </span>;\r\n  }\r\n\r\n  return <Col span={12} key=\"Top\">\r\n            <Paper sx={{padding: '5px'}} shadow=\"xs\">\r\n                {\r\n                  balances\r\n                }\r\n                <SimpleGrid cols={3} sx={{marginTop: '10px'}}>\r\n                  {\r\n                    artistItems.map(item => {\r\n                      return <Button\r\n                                compact\r\n                                sx={{margin: '2px'}}\r\n                                variant=\"outline\"\r\n                                key={`button.${item.id}`}\r\n                                onClick={() => {\r\n                                  // TODO: Check this value\r\n                                  selectAsset(item)\r\n                                }}\r\n                              >\r\n                                {item.symbol}: {item.id} ({artist})\r\n                              </Button>\r\n                    })\r\n                  }\r\n                </SimpleGrid>\r\n                <br/>\r\n                <Button\r\n                  onClick={() => {\r\n                    back()\r\n                  }}\r\n                >\r\n                  Go back\r\n                </Button>   \r\n            </Paper>\r\n          </Col>;\r\n\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { Button, Box, Text, Loader, Col, Paper } from '@mantine/core';\r\nimport { Apis } from \"bitsharesjs-ws\";\r\nimport SelectAsset from './SelectAsset';\r\n\r\nexport default function Portfolio(properties) {\r\n  const userID = properties.userID;\r\n  const nodes = properties.nodes;\r\n  const environment = properties.environment;\r\n\r\n  const setNodes = properties.setNodes;\r\n  const setAsset = properties.setAsset;\r\n  const setProdConnection = properties.setProdConnection;\r\n  const setTestnetConnection = properties.setTestnetConnection;\r\n  const setConnection = properties.setConnection;\r\n\r\n  const [balances, setBalances] = useState();\r\n  const [tries, setTries] = useState(0);\r\n  \r\n  function back() {\r\n    setNodes();\r\n    setProdConnection();\r\n    setTestnetConnection();\r\n    setConnection();\r\n  }\r\n\r\n  function increaseTries() {\r\n    let newTries = tries + 1;\r\n    setBalances();\r\n    setTries(newTries);\r\n  }\r\n\r\n  function chosenAsset(item) {\r\n    setAsset(item)\r\n  }\r\n\r\n  function changeURL() {\r\n    let nodesToChange = nodes;\r\n    nodesToChange.push(nodesToChange.shift()); // Moving misbehaving node to end\r\n    setNodes(nodesToChange);\r\n\r\n    if (environment === 'production') {\r\n      setProdConnection(nodesToChange[0]);\r\n    } else {\r\n      setTestnetConnection(nodesToChange[0]);\r\n    }\r\n  }\r\n  \r\n  useEffect(() => {\r\n    async function fetchBalances() {\r\n\r\n      let target = environment === 'production' ? 'BTS' : 'BTS_TEST';\r\n      window.electron.testConnections(target).then(async (res) => {\r\n        let fastestNode = res.node;\r\n        setNodes(res.latencies);\r\n\r\n        if (environment === 'production') {\r\n          setProdConnection(fastestNode);\r\n        } else {\r\n          setTestnetConnection(fastestNode);\r\n        }\r\n\r\n        try {\r\n          await Apis.instance(fastestNode, true).init_promise;\r\n        } catch (error) {\r\n          console.log(error);\r\n          changeURL();\r\n          return;\r\n        }\r\n        \r\n        let balanceResult;\r\n        try {\r\n          balanceResult = await Apis.instance().db_api().exec(\"get_account_balances\", [userID, []]);\r\n        } catch (error) {\r\n          console.log(error);\r\n          return;\r\n        }\r\n        \r\n        let balanceSymbols;\r\n        try {\r\n          balanceSymbols = await Apis.instance().db_api().exec( \"lookup_asset_symbols\", [ balanceResult.map(balance => balance.asset_id) ]);\r\n        } catch (error) {\r\n          console.log(error);\r\n          return;\r\n        }\r\n\r\n        let filteredAssets = balanceSymbols.filter(asset => {\r\n          let desc = JSON.parse(asset.options.description);\r\n          return desc.nft_object ? true : false;\r\n        })\r\n        \r\n        setBalances(filteredAssets.length ? filteredAssets : []);\r\n      })\r\n    }\r\n    fetchBalances();\r\n  }, [userID, tries]);\r\n  \r\n  let topText;\r\n  if (!nodes) {\r\n    topText = <span>\r\n                <Loader variant=\"dots\" />\r\n                <Text size=\"sm\" weight={600}>\r\n                    Finding the fastest node to connect to...\r\n                </Text>\r\n              </span>;\r\n  } else if (!balances) {\r\n    topText = <span>\r\n                <Loader variant=\"dots\" />\r\n                <Text size=\"sm\" weight={600}>\r\n                    Checking your Bitshares account...\r\n                </Text>\r\n              </span>;\r\n  } else if (!balances.length) {\r\n    topText = <span>\r\n                <Loader variant=\"dots\" />\r\n                <Text size=\"sm\" weight={600}>\r\n                    You don't seem to have any NFTs in your portfolio yet.\r\n                </Text>\r\n              </span>;\r\n  } else {\r\n    topText = <span>\r\n                <Text size=\"sm\" weight={600}>\r\n                    Your portfolio contains the following NFTs\r\n                </Text>\r\n                <SimpleGrid cols={3} sx={{marginTop: '10px'}}>\r\n                  {\r\n                    balances.map(asset => {\r\n                      return <Button\r\n                                compact\r\n                                sx={{margin: '2px'}}\r\n                                variant=\"outline\"\r\n                                key={`button.${asset.id}`}\r\n                                onClick={() => {\r\n                                  chosenAsset(asset)\r\n                                }}\r\n                              >\r\n                                {asset.symbol}: {asset.id}\r\n                              </Button>\r\n                    })\r\n                  }\r\n                </SimpleGrid>\r\n              </span>\r\n  }\r\n\r\n  let tryAgain;\r\n  if (nodes && balances) {\r\n    tryAgain = <span>\r\n                  <Button\r\n                    sx={{marginTop: '15px', marginRight: '5px'}}\r\n                    onClick={() => {\r\n                      increaseTries()\r\n                    }}\r\n                  >\r\n                    Refresh portfolio\r\n                  </Button>\r\n                </span>;\r\n  }\r\n\r\n  return (\r\n    <Col span={12}>\r\n      <Paper padding=\"sm\" shadow=\"xs\">\r\n        <Box mx=\"auto\" sx={{padding: '10px'}}>\r\n          {\r\n            topText\r\n          }\r\n          {\r\n            tryAgain\r\n          }\r\n          <Button\r\n            sx={{marginTop: '15px'}}\r\n            onClick={() => {\r\n              back()\r\n            }}\r\n          >\r\n            Back\r\n          </Button>\r\n        </Box>\r\n      </Paper>\r\n    </Col>\r\n  );\r\n}\r\n","import { useState } from 'react';\r\nimport { TextInput, Checkbox, Button, Box, Text, Divider, Col, Paper, Group, Tooltip, Loader } from '@mantine/core';\r\nimport { useForm } from '@mantine/form';\r\nimport { TransactionBuilder } from 'bitsharesjs';\r\nimport { Apis } from \"bitsharesjs-ws\";\r\n\r\nexport default function Buy(properties) {\r\n  const connection = properties.connection;\r\n  const asset = properties.asset;\r\n  \r\n  const [inProgress, setInProgress] = useState(false);\r\n  const [bought, setBought] = useState(false);\r\n\r\n  const setAsset = properties.setAsset;\r\n  const setMode = properties.setMode;\r\n\r\n  const environment = properties.environment;\r\n  const wsURL = properties.wsURL;\r\n  const nodes = properties.nodes;\r\n  const setNodes = properties.setNodes;\r\n  const setProdConnection = properties.setProdConnection;\r\n  const setTestnetConnection = properties.setTestnetConnection;\r\n\r\n  function back() {\r\n    setMode();\r\n  }\r\n\r\n  function changeURL() {\r\n    let nodesToChange = nodes;\r\n    nodesToChange.push(nodesToChange.shift()); // Moving misbehaving node to end\r\n    setNodes(nodesToChange);\r\n    console.log(`Setting new node connection to: ${nodesToChange[0]}`)\r\n    if (environment === 'production') {\r\n      setProdConnection(nodesToChange[0]);\r\n    } else {\r\n      setTestnetConnection(nodesToChange[0]);\r\n    }\r\n  }\r\n\r\n  function attemptPurchase() {\r\n    console.log('Attempting to purchase NFT');\r\n  }\r\n\r\n  let response;\r\n  if (inProgress) {\r\n    response = <span>\r\n                  <Loader variant=\"dots\" />\r\n                  <Text size=\"md\">\r\n                    Waiting on user response from BEET client\r\n                  </Text>\r\n              </span>;\r\n  } else if (bought) {\r\n    response = <span>\r\n                    <Text size=\"md\">\r\n                      Successfully purchased the NFT {''} for {''}.\r\n                    </Text>\r\n                    <Button\r\n                      onClick={() => {\r\n                        back()\r\n                      }}\r\n                    >\r\n                      Back\r\n                    </Button>\r\n                </span>;\r\n  } else {\r\n    response = <span>\r\n                  <Text size=\"md\">\r\n                    Instruct BEET to purchase the NFT {''} for {''}?\r\n                  </Text>\r\n                  <Button\r\n                    onClick={() => {\r\n                      attemptPurchase()\r\n                    }}\r\n                  >\r\n                    Yes\r\n                  </Button>  \r\n                  <Button\r\n                    onClick={() => {\r\n                      back()\r\n                    }}\r\n                  >\r\n                    No\r\n                  </Button>\r\n                </span>;\r\n  }\r\n  \r\n  return <Col span={12} key=\"Top\">\r\n          <Paper sx={{padding: '5px'}} shadow=\"xs\">\r\n            {response}\r\n          </Paper>\r\n        </Col>;\r\n}\r\n","import { useState } from 'react';\r\nimport { TextInput, Checkbox, Button, Box, Text, Divider, Col, Paper, Group, Tooltip, Loader } from '@mantine/core';\r\nimport { useForm } from '@mantine/form';\r\nimport { TransactionBuilder } from 'bitsharesjs';\r\nimport { Apis } from \"bitsharesjs-ws\";\r\n\r\nexport default function NFT(properties) {\r\n  const connection = properties.connection;\r\n  const asset = properties.asset;\r\n  \r\n  const [inProgress, setInProgress] = useState(false);\r\n\r\n  const setAsset = properties.setAsset;\r\n  const setMode = properties.setMode;\r\n\r\n  const environment = properties.environment;\r\n  const wsURL = properties.wsURL;\r\n  const nodes = properties.nodes;\r\n  const setNodes = properties.setNodes;\r\n  const setProdConnection = properties.setProdConnection;\r\n  const setTestnetConnection = properties.setTestnetConnection;\r\n\r\n  function back() {\r\n    setAsset();\r\n    setMode();\r\n  }\r\n\r\n  function changeURL() {\r\n    let nodesToChange = nodes;\r\n    nodesToChange.push(nodesToChange.shift()); // Moving misbehaving node to end\r\n    setNodes(nodesToChange);\r\n    console.log(`Setting new node connection to: ${nodesToChange[0]}`)\r\n    if (environment === 'production') {\r\n      setProdConnection(nodesToChange[0]);\r\n    } else {\r\n      setTestnetConnection(nodesToChange[0]);\r\n    }\r\n  }\r\n\r\n  return (\r\n    !inProgress\r\n    ? [\r\n        <Col span={12} key=\"Top\">\r\n          <Paper sx={{padding: '5px'}} shadow=\"xs\">\r\n\r\n              <Button\r\n                onClick={() => {\r\n                  back()\r\n                }}\r\n              >\r\n                Go back\r\n              </Button>   \r\n          </Paper>\r\n        </Col>\r\n    ]\r\n  : <Col span={12} key=\"Top\">\r\n      <Paper sx={{padding: '5px'}} shadow=\"xs\">\r\n          <Text size=\"md\">\r\n            Couldn't load NFT\r\n          </Text>\r\n      </Paper>\r\n    </Col>\r\n  )\r\n\r\n}\r\n","import { useState } from \"react\";\nimport { Text, Container, Center, Group, Grid, Col, Paper, Button, Divider, Image } from '@mantine/core'\nimport useLocalStorageState from 'use-local-storage-state';\n\nimport Connect from \"./components/Connect\";\nimport BeetLink from \"./components/BeetLink\";\nimport Mode from \"./components/Mode\";\nimport SelectAsset from \"./components/SelectAsset\";\nimport Featured from \"./components/Featured\";\nimport Portfolio from \"./components/Portfolio\";\nimport Buy from \"./components/Buy\";\nimport NFT from \"./components/NFT\";\n\nimport './App.css'\n\nfunction openURL() {\n  window.electron.openURL('gallery');\n}\n\nfunction App() {\n\n  const [nodes, setNodes] = useState();\n  const [connection, setConnection] = useState(null);\n  const [authenticated, setAuthenticated] = useState(false);\n  const [isLinked, setIsLinked] = useState(false);\n\n  const [mode, setMode] = useState();\n  const [asset, setAsset] = useState();\n\n  const [identity, setIdentity] = useLocalStorageState(\n    'beetIdentity', {defaultValue: null}\n  );\n  const [environment, setEnvironment] = useLocalStorageState(\n    'environment', {defaultValue: 'production'}\n  );\n  const [prodConnection, setProdConnection] = useLocalStorageState(\n    'prodNetwork', {defaultValue: \"wss://eu.nodes.bitshares.ws\"}\n  );\n  const [testnetConnection, setTestnetConnection] = useLocalStorageState(\n    'testNetwork', {defaultValue: \"wss://node.testnet.bitshares.eu\"}\n  );\n\n  let wsURL = environment === 'production'\n                ? prodConnection\n                : testnetConnection;\n\n  function reset() {\n    setConnection();\n    setAuthenticated();\n    setIsLinked(false);\n    setIdentity(null);\n    setMode();\n    setAsset();\n    setNodes();\n  }\n\n  let initPrompt;\n  if (!mode) {\n    initPrompt = <Mode setMode={setMode} />;\n  } else if (mode === 'search' && !asset) {\n    initPrompt = <SelectAsset\n                    wsURL={wsURL}\n                    nodes={nodes}\n                    environment={environment}\n                    setProdConnection={setProdConnection}\n                    setTestnetConnection={setTestnetConnection}\n                    setAsset={setAsset}\n                    setMode={setMode}\n                    setNodes={setNodes}\n                  />\n  } else if (mode === 'featured' && !asset) {\n      initPrompt = <Featured\n                      environment={environment}\n                      setAsset={setAsset}\n                    />\n  } else if ((mode === 'balance' || mode === 'issued' || mode === 'buy') && !asset) {\n    // We need to \n    if (!connection) {\n      initPrompt = <Connect\n                      connection={connection}\n                      setConnection={setConnection}\n                      setAuthenticated={setAuthenticated}\n                    />;\n    } else if (connection && authenticated && !isLinked) {\n      initPrompt = <BeetLink\n                      connection={connection}\n                      setCrypto={setCrypto}\n                      setEnvironment={setEnvironment}\n                      setIsLinked={setIsLinked}\n                      setIdentity={setIdentity}\n                    />;\n    } else {\n      let userID = identity.requested.account.id;\n      if (mode === 'balance') {\n        initPrompt = <Portfolio\n                        userID={userID}\n                        nodes={nodes}\n                        environment={environment}\n                        setProdConnection={setProdConnection}\n                        setTestnetConnection={setTestnetConnection}\n                        setAsset={setAsset}\n                        setMode={setMode}\n                        setNodes={setNodes}\n                      />\n      } else if (mode === 'issued') {\n        initPrompt = <SelectAsset\n                        userID={userID}\n                        wsURL={wsURL}\n                        nodes={nodes}\n                        environment={environment}\n                        setProdConnection={setProdConnection}\n                        setTestnetConnection={setTestnetConnection}\n                        setAsset={setAsset}\n                        setMode={setMode}\n                        setNodes={setNodes}\n                      />\n      } else if (mode === 'buy') {\n        initPrompt = <Buy \n                        userID={userID}\n                        nodes={nodes}\n                        environment={environment}\n                        setProdConnection={setProdConnection}\n                        setTestnetConnection={setTestnetConnection}\n                        setNodes={setNodes}\n                        connection={connection}\n                        setConnection={setConnection}\n                        setMode={setMode}\n                      />\n      }\n    }\n  } else if (asset) {\n    initPrompt = <NFT\n                    asset={asset}\n                    setAsset={setAsset}\n                    setMode={setMode}\n                    wsURL={wsURL}\n                    environment={environment}\n                    setProdConnection={setProdConnection}\n                    setTestnetConnection={setTestnetConnection}\n                  />;\n  } else {\n    initPrompt = <Text size=\"md\">An issue was encountered, reset and try again.</Text>\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Container>\n          <Grid key={\"about\"} grow>\n            <Col span={12}>\n              <div style={{ width: 350, marginLeft: 'auto', marginRight: 'auto' }}>\n                <Image\n                  radius=\"md\"\n                  src=\"./logo2.png\"\n                  alt=\"Bitshares logo\"\n                  caption=\"Bitshares NFT Viewer - Created by NFTEA Gallery\"\n                />\n              </div>\n            </Col>\n            \n            {\n              initPrompt\n            }\n\n            <Col span={12}>\n              <span>\n                <Divider></Divider>\n                <Button \n                  variant=\"default\" color=\"dark\"\n                  sx={{marginTop: '15px', marginRight: '5px'}}\n                  onClick={() => {\n                    openURL()\n                  }}\n                >\n                  NFTEA Gallery\n                </Button>\n                {\n                  isLinked\n                  ? <Button \n                      variant=\"outline\" color=\"dark\"\n                      sx={{marginTop: '15px', marginBottom: '5px'}}\n                      onClick={() => {\n                        reset()\n                      }}\n                    >\n                      Reset app\n                    </Button>\n                  : null\n                }\n              </span>\n            </Col>\n          </Grid>\n        </Container>\n      </header>\n    </div>\n  );\n}\n\nexport default App\n","import { createRoot } from 'react-dom/client';\nimport App from './App';\n\nconst container = document.getElementById('root');\nconst root = createRoot(container);\nroot.render(<App />);\n"],"sourceRoot":""}